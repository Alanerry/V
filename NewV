#include <omnetpp.h>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <map>
#include <cmath>

using namespace omnetpp;

class VehicleModule : public cSimpleModule
{
private:
    static std::map<double, int> communicationCounts;  // 记录每个时间戳的通讯次数
    static double lastOutputTime;  // 记录最后一次输出的时间
    cMessage *updatePositionMsg = nullptr;  // 用于位置更新的消息
    std::map<int, std::pair<double, double>> vehiclePositions;  // 记录所有车辆的位置，<id, (x, y)>

protected:
    virtual void initialize() override {
        updatePositionMsg = new cMessage("updatePosition");
        scheduleAt(0, updatePositionMsg);  // 从0秒开始调度位置更新
    }

    virtual void handleMessage(cMessage *msg) override {
        if (msg == updatePositionMsg) {
            double currentTime = simTime().dbl();
            updatePosition();
            updateNeighbors();  // 更新邻居表
            communicationCounts[currentTime]++;
            scheduleNextUpdate();
        } else {
            // 处理其他消息
        }
    }

    // 更新位置
    virtual void updatePosition() {
        const char *filename = par("xmlFilename").stringValue();
        cXMLElement *xml = getEnvir()->getXMLDocument(filename, nullptr);
        if (xml) {
            double currentTime = simTime().dbl();
            cXMLElement *vehicleElement = xml->getFirstChildWithTag("VehiclePosition");
            while (vehicleElement) {
                double timestamp = atof(vehicleElement->getAttribute("time"));
                if (timestamp == currentTime) {
                    int vehicleId = atoi(vehicleElement->getFirstChildWithTag("VehicleID")->getNodeValue());
                    const char* x = vehicleElement->getFirstChildWithTag("X")->getNodeValue();
                    const char* y = vehicleElement->getFirstChildWithTag("Y")->getNodeValue();
                    double displayX = atof(x) + 300;  // 中心点调整
                    double displayY = atof(y) + 350;
                    vehiclePositions[vehicleId] = std::make_pair(displayX, displayY);

                    // 如果是当前车辆，更新显示
                    if (vehicleId == getIndex() + 1) {
                        getDisplayString().setTagArg("p", 0, std::to_string(displayX).c_str());
                        getDisplayString().setTagArg("p", 1, std::to_string(displayY).c_str());
                    }
                }
                vehicleElement = vehicleElement->getNextSiblingWithTag("VehiclePosition");
            }
        }
    }

    // 更新邻居表
    virtual void updateNeighbors() {
        int myId = getIndex() + 1;  // 当前车辆的ID
        double myX = vehiclePositions[myId].first;
        double myY = vehiclePositions[myId].second;

        GpsrRouting gpsrRouting;  // 假设可以访问GPSR路由对象
        gpsrRouting.neighborTable.clear();  // 清空邻居表，重新添加

        // 遍历所有车辆，计算距离，并判断是否在50米范围内
        for (const auto& [vehicleId, position] : vehiclePositions) {
            if (vehicleId != myId) {
                double distance = calculateDistance(myX, myY, position.first, position.second);
                if (distance <= 50.0) {
                    // 添加到邻居表
                    GPSR_neighborRecord neighbor;
                    neighbor.id = vehicleId;
                    neighbor.x = position.first;
                    neighbor.y = position.second;
                    neighbor.ts = simTime().dbl();  // 时间戳
                    gpsrRouting.neighborTable[vehicleId] = neighbor;
                }
            }
        }
    }

    // 计算两点之间的距离
    double calculateDistance(double x1, double y1, double x2, double y2) {
        return std::sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    }

    virtual void scheduleNextUpdate() {
        double currentTime = simTime().dbl();
        auto it = communicationCounts.upper_bound(currentTime);
        if (it != communicationCounts.end()) {
            scheduleAt(it->first, updatePositionMsg);
        } else {
            scheduleAt(currentTime + 1, updatePositionMsg);  // 默认情况下每秒更新一次位置
        }
    }
};

// 初始化静态变量
std::map<double, int> VehicleModule::communicationCounts;
double VehicleModule::lastOutputTime = -1;

Define_Module(VehicleModule);
